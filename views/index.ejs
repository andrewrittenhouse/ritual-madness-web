<html>
  <head>
    <title>Ritual Madness</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="public/stylesheets/cool-input.css">
      <style>
      * {
        font-family: "Verdana", sans-serif;
      }

      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        background: radial-gradient(circle, #ff3333 25%, #4564ff 100%);
        font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
        margin: 1rem;
      }

      header {
        text-align: center;
      }

      #message {
        background-color: red;
        padding: .25rem;
      }

      .drawer button {
        display: block;
      }

      .drawer button:last-child {
        margin-bottom: 0.5rem;
      }

      h2 {
        white-space: nowrap;
        padding: .25rem;
        margin: 0;
      }

      #albums {
        padding: 1rem 0;
      }

      #menu {
        padding: 1rem 0;
      }

      audio {
        margin: 1rem 0;
      }

      audio::-webkit-media-controls-panel {
        background-color: white;
      }

  </style>
  </head>
  <body>
    <header>
      <h1><button id="main-button">Ritual Madness</button></h1>
    </header>

    <div id="menu-drawer" class="drawer off">
      <div id="menu"></div>
    </div>

    <audio controls>
      <source />
    </audio> 

    <div id="message-drawer" class="drawer off">
      <p id="message" class="digital"></p>
    </div>

    <div id="album-title-display" class="digital on out">
      <h2 id="album-title"></h2>
    </div>

    <div id="album-drawer" class="drawer">
      <div id="albums"></div>
    </div>
    
    <script>
      const mainButtonElement = document.getElementById('main-button');

      const menuDrawerElement = document.getElementById('menu-drawer');
      const menuElement = document.getElementById('menu');

      const playerElement = document.querySelector('audio');

      const messageDrawerElement = document.getElementById('message-drawer');
      const messageElement = document.getElementById('message');

      const albumDrawerElement = document.getElementById('album-drawer');
      const albumsElement = document.getElementById('albums');

      const albumTitleDisplayElement = document.getElementById('album-title-display');
      const albumTitleElement = document.getElementById('album-title');

      let canPlay = false;

      playerElement.addEventListener('canplay', () => {
        canPlay = true;
      });

      playerElement.addEventListener('ended', () => {
        nextSong();
      });

      playerElement.addEventListener('error', (e) => {
        messageElement.innerHTML = playerElement.error.message;

        messageDrawerElement.classList.remove('off');
      }, true);

      playerElement.addEventListener('playing', () => {
        navigator.mediaSession.playbackState = 'playing';
      });

      playerElement.addEventListener('pause', () => {
        navigator.mediaSession.playbackState = 'paused';
      });

      function hideMenu() {
        isMenuVisible = false;

        menuDrawerElement.classList.add('off');
      }

      function showMenu() {
        isMenuVisible = true;

        menuDrawerElement.classList.remove('off');
      }

      function toggleMenu() {
        if (isMenuVisible) {
          hideMenu();
        } else {
          showMenu();
        }
      }

      const albums = <%-albumData%>;

      let songs = [];
      let isMenuVisible = false;

      let currentAlbum;

      function createSongButton(songIndex, songName) {
        const button = document.createElement('button');

        button.innerHTML = songName;

        button.addEventListener('click', () => {
          loadSong(songIndex);
        });

        return button;
      }

      function renderAlbum(album) {
        if (currentAlbum === album) {
          return;
        }

        album.button.classList.add('on');
        album.button.classList.remove('off');

        for (const otherAlbum of albums) {
          if (otherAlbum === album) {
            continue;
          }

          otherAlbum.button.classList.remove('on');
          otherAlbum.button.classList.add('off');
        }

        albumDrawerElement.classList.add('off');
        messageDrawerElement.classList.add('off');
        albumTitleDisplayElement.classList.add('off');

        setTimeout(() => {
          songs.forEach(({ button }) => button.remove());

          albumTitleElement.innerHTML = album.albumName;

          songs = album.songs.map((song, i) => ({ ...song, button: createSongButton(i, song.metadata.title) }));

          albumsElement.append(...songs.map(song => song.button));

          albumDrawerElement.classList.remove('off');
          albumTitleDisplayElement.classList.remove('off');

          loadSong(0);
        }, !currentAlbum ? 0 : 1000);

        currentAlbum = album;
      }

      let currentSongIndex = 0;

      function loadSong(songIndex) {
        messageDrawerElement.classList.add('off');

        currentSongIndex = songIndex;

        for (let i = 0; i < songs.length; i++) {
          const { button, metadata, url } = songs[i];

          if (i !== songIndex) {
            button.classList.remove('on');

            continue;
          }

          button.classList.add('on');

          playerElement.pause();

          playerElement.src = url;

          playerElement.load();

          navigator.mediaSession.metadata = new MediaMetadata(metadata);

          document.title = `${currentAlbum.albumName} - ${metadata.title}`;

          if (canPlay) {
            playerElement.play();
          }
        }
      }

      function nextSong() {
        if (currentSongIndex === songs.length - 1) {
          navigator.mediaSession.playbackState = 'none';

          return
        }
        
        loadSong(currentSongIndex + 1);
      }

      function previousSong() {
        if (playerElement.currentTime > 5) {
          playerElement.currentTime = 0;

          return;
        } 
        
        loadSong((currentSongIndex === 0) ? songs.length - 1 : currentSongIndex - 1);
      }

      navigator.mediaSession.setActionHandler('play', () => {
        playerElement.play();
      });

      navigator.mediaSession.setActionHandler('pause', () => {
        playerElement.pause();
      });

      navigator.mediaSession.setActionHandler('previoustrack', () => {
        previousSong();
      });

      navigator.mediaSession.setActionHandler('nexttrack', () => {
        nextSong();
      });

      mainButtonElement.addEventListener('click', () => {
        if (currentAlbum === albums[0]) {
          toggleMenu();

          return;
        }

        hideMenu();

        history.replaceState({}, albums[0].name, '/');

        renderAlbum(albums[0]);
      });

      albums[0].button = mainButtonElement;

      albums.forEach((album, i) => {
        if (i === 0) {
          return;
        }

        const button = document.createElement('button');

        button.innerHTML = album.albumName;

        button.addEventListener('click', () => {
          history.replaceState({}, album.name, album.albumSlug);

          renderAlbum(album);
        });

        menuElement.append(button);

        album.button = button;
      });

      window.addEventListener('load', () => {
        const album = albums.find(album => album.albumSlug === location.pathname);

        if (!album) {
          history.replaceState({}, albums[0].albumName, albums[0].albumSlug);

          renderAlbum(albums[0]);

          return;
        }

        renderAlbum(album);

        showMenu();

        loadSong(0);
      });
    </script>
  </body>
</html>