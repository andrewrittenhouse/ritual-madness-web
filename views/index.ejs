<html>
  <head>
    <title>Ritual Madness</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="public/stylesheets/cool-input.css">
    <style>
      :root {
        --container-width: 33px;
      }

      * {
        font-family: "Verdana", sans-serif;
      }

      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: hsl(48, 11%, 83%);
        background-color: rgb(19, 19, 19);
        font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
        margin: 1rem;
      }

      header {
        text-align: center;
      }

      .canvas-container {
        padding: 1rem 133px;
      }

      #songs {
        display: flex;
        flex-direction: column;
        align-items: start;
        margin-top: 1rem;
      }

      #songs div {
        border: 1px solid black;
        border-radius: 1rem;
        margin-top: 1rem;
      }

      #songs div:hover {
        cursor: pointer;
        color: white;
        background-color: black;
      }

      canvas {
        height: var(--container-width);
        width: var(--container-width);
        margin: 2rem 0;
      }

      #message {
        font-weight: bold;
        color: red;
        background-color: white;
        border-radius: 1;
      }

      #image {
        padding: 4rem;
        text-align: center;
      }

      img {
        max-width: 100%;
        max-height: 50vh;
      }
  </style>
  </head>
  <body>
    <header>
      <h1>Ritual Madness</h1>
    </header>

    <audio controls>
      <source />
    </audio>  
    <p id="message"></p>

    <div id="songs"></div>

    <div id="image">
      
    </div>
    
    <script>
      const messageText = document.getElementById('message');

      const player = document.querySelector('audio');

      player.addEventListener('ended', () => nextSong());

      player.addEventListener('error', function failed(e) {
        switch (e.target.error.code) {
          case e.target.error.MEDIA_ERR_ABORTED:
            messageText.innerHTML = 'You aborted the video playback.';
            break;
          case e.target.error.MEDIA_ERR_NETWORK:
            messageText.innerHTML = 'A network error caused the audio download to fail.';
            break;
          case e.target.error.MEDIA_ERR_DECODE:
            messageText.innerHTML = 'The audio playback was aborted due to a corruption problem or because the video used features your browser did not support.';
            break;
          case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
            messageText.innerHTML = 'The video audio not be loaded, either because the server or network failed or because the format is not supported.';
            break;
          default:
            messageText.innerHTML = 'An unknown error occurred.';
            break;
        }
      }, true);

      player.addEventListener('playing', () => {
        navigator.mediaSession.playbackState = 'playing';
      });

      player.addEventListener('pause', () => {
        navigator.mediaSession.playbackState = 'paused';
      });

      function createAlbumHeader(albumName) {
        const heading = document.createElement('h2');
        
        heading.innerHTML = albumName;

        return heading;
      }

      function createSongButton(songIndex, songName) {
        const button = document.createElement('button');

        button.innerHTML = songName;

        button.addEventListener('click', () => {
          loadSong(songIndex);
          
          player.play();
        });

        return button;
      }

      const albums = <%-albumData%>;

      const [songs] = albums.reduce(([songs, songIndex], album) => {
        for (const song of album.songs) {
          song.button = createSongButton(songIndex++, song.metadata.title);
        }

        return [songs.concat(album.songs), songIndex];
      }, [[], 0]);

      document.getElementById('songs').append(...albums.reduce((elements, album) => [
        ...elements,
        //createAlbumHeader(album.albumName),
        ...album.songs.map(song => song.button),
      ], []));

      let currentSongIndex = 0;

      function loadSong(songIndex) {
        currentSongIndex = songIndex;

        for (let i = 0; i < songs.length; i++) {
          const { button, metadata, url } = songs[i];

          if (i !== songIndex) {
            button.classList.add('off');
            button.classList.remove('on');

            continue;
          }

          button.classList.remove('off');
          button.classList.add('on');

          player.pause();

          player.src = url;

          player.load();

          navigator.mediaSession.metadata = new MediaMetadata(metadata);

          document.title = `Ritual Madness - ${metadata.title}`;
        }
      }

      function nextSong() {
        if (currentSongIndex === songs.length - 1) {
          navigator.mediaSession.playbackState = 'none';

          return
        }
        
        loadSong(currentSongIndex + 1);

        player.play();
      }

      function previousSong() {
        if (currentSongIndex === 0) {
          navigator.mediaSession.playbackState = 'none';

          return
        }

        loadSong(currentSongIndex - 1);

        player.play();
      }

      navigator.mediaSession.setActionHandler('play', () => {
        player.play();
      });

      navigator.mediaSession.setActionHandler('pause', () => {
        player.pause();
      });

      navigator.mediaSession.setActionHandler('previoustrack', () => {
        previousSong();
      });

      navigator.mediaSession.setActionHandler('nexttrack', () => {
        nextSong();
      });

      loadSong(0);
    </script>
  </body>
</html>