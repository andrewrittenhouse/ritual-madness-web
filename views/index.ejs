<html>
  <head>
    <title>Ritual Madness</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="public/stylesheets/cool-input.css">
      <style>
      * {
        font-family: "Verdana", sans-serif;
      }

      html {
        height: 100%;
      }

      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
        margin: 0;

        height: 100%;

        justify-content: space-around;
      }

      .content {
        position: relative;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
      }

      .video-container {
        padding: 4rem;
      }

      header {
        text-align: center;
      }

      .posters {
        position: absolute;

        top: 0;
        right: 0;
        bottom: 0;
        left: 0;

        white-space: nowrap;
      }

      #posters {
        position: relative;

        overflow: hidden;

        height: 100%;
      }

      #message {
        background-color: red;
        padding: .25rem;
      }

      .drawer button {
        display: block;
      }

      .drawer button:last-child {
        margin-bottom: 0.5rem;
      }

      h2 {
        white-space: nowrap;
        padding: .25rem;
        margin: 0;
      }

      #albums {
        padding: 1rem 0;
      }

      #album-title {
        text-align: center;

        font-size: 22px;
        padding: 1rem;
      }

      #menu {
        padding: 1rem 0;
      }

      audio {
        display: none;
        margin: 1rem 0;
      }

      #album-drawer {
        display: none;
      }
  </style>
  </head>
  <body>
    <div class="posters">
      <div id="posters"></div>
    </div>

    <header>
      <div id="album-title" class="digital on">Ritual_Madness</div>
    </header>

    <div class="content">
      <div id="menu-drawer" class="drawer off">
        <div id="menu"></div>
      </div>

      <audio controls>
        <source />
      </audio> 

      <div id="message-drawer" class="drawer off">
        <p id="message" class="digital"></p>
      </div>

      <div id="album-drawer" class="drawer">
        <div id="albums"></div>
      </div>

      <div class="video-container digital">
        <video controls width="250">
          <source src="/public/dead radio.mp4" type="video/webm">
        </video>
      </div>
    </div>

    <div class="space"></div>
    
    <script>
      const menuDrawerElement = document.getElementById('menu-drawer');
      const menuElement = document.getElementById('menu');

      const playerElement = document.querySelector('audio');

      const messageDrawerElement = document.getElementById('message-drawer');
      const messageElement = document.getElementById('message');

      //const albumTitleElement = document.getElementById('album-title');
      const albumDrawerElement = document.getElementById('album-drawer');
      const albumsElement = document.getElementById('albums');

      let canPlay = false;

      playerElement.addEventListener('canplay', () => {
        canPlay = true;
      });

      playerElement.addEventListener('ended', () => {
        nextSong();
      });

      playerElement.addEventListener('error', (e) => {
        messageElement.innerHTML = playerElement.error.message;

        messageDrawerElement.classList.remove('off');
      }, true);

      playerElement.addEventListener('playing', () => {
        navigator.mediaSession.playbackState = 'playing';
      });

      playerElement.addEventListener('pause', () => {
        navigator.mediaSession.playbackState = 'paused';
      });

      function hideMenu() {
        isMenuVisible = false;

        menuDrawerElement.classList.add('off');
      }

      function showMenu() {
        isMenuVisible = true;

        menuDrawerElement.classList.remove('off');
      }

      function toggleMenu() {
        if (isMenuVisible) {
          hideMenu();
        } else {
          showMenu();
        }
      }

      const albums = <%-albumData%>;

      let songs = [];
      let isMenuVisible = false;

      let currentAlbum;

      function createSongButton(songIndex, songName) {
        const button = document.createElement('button');

        button.innerHTML = songName;

        button.addEventListener('click', () => {
          loadSong(songIndex);
        });

        return button;
      }

      function renderAlbum(album) {
        if (currentAlbum === album) {
          return;
        }

        // albumTitleElement.innerHTML = album.albumName;

        // album.button.classList.add('on');
        // album.button.classList.remove('off');

        for (const otherAlbum of albums) {
          if (otherAlbum === album) {
            continue;
          }

          otherAlbum.button.classList.remove('on');
          otherAlbum.button.classList.add('off');
        }

        albumDrawerElement.classList.add('off');
        messageDrawerElement.classList.add('off');

        setTimeout(() => {
          songs.forEach(({ button }) => button.remove());

          songs = album.songs.map((song, i) => ({ ...song, button: createSongButton(i, song.metadata.title) }));

          albumsElement.append(...songs.map(song => song.button));

          albumDrawerElement.classList.remove('off');

          loadSong(0);
        }, !currentAlbum ? 0 : 1000);

        currentAlbum = album;
      }

      let currentSongIndex = 0;

      function loadSong(songIndex) {
        messageDrawerElement.classList.add('off');

        currentSongIndex = songIndex;

        for (let i = 0; i < songs.length; i++) {
          const { button, metadata, url } = songs[i];

          if (i !== songIndex) {
            button.classList.remove('on');

            continue;
          }

          button.classList.add('on');

          playerElement.pause();

          playerElement.src = url;

          playerElement.load();

          navigator.mediaSession.metadata = new MediaMetadata(metadata);

          document.title = `${currentAlbum.albumName} - ${metadata.title}`;

          if (canPlay) {
            playerElement.play();
          }
        }
      }

      function nextSong() {
        if (currentSongIndex === songs.length - 1) {
          navigator.mediaSession.playbackState = 'none';

          return
        }
        
        loadSong(currentSongIndex + 1);
      }

      function previousSong() {
        if (playerElement.currentTime > 5) {
          playerElement.currentTime = 0;

          return;
        } 
        
        loadSong((currentSongIndex === 0) ? songs.length - 1 : currentSongIndex - 1);
      }

      navigator.mediaSession.setActionHandler('play', () => {
        playerElement.play();
      });

      navigator.mediaSession.setActionHandler('pause', () => {
        playerElement.pause();
      });

      navigator.mediaSession.setActionHandler('previoustrack', () => {
        previousSong();
      });

      navigator.mediaSession.setActionHandler('nexttrack', () => {
        if (currentSongIndex === songs.length - 1) {
          loadSong(0);

          return
        }
      });

      // mainButtonElement.addEventListener('click', () => {
      //   if (currentAlbum === albums[0]) {
      //     toggleMenu();

      //     return;
      //   }

      //   hideMenu();

      //   history.replaceState({}, albums[0].name, '/');

      //   renderAlbum(albums[0]);
      // });

      // albums[0].button = mainButtonElement;

      // albums.forEach((album, i) => {
      //   if (i === 0) {
      //     return;
      //   }

      //   const button = document.createElement('button');

      //   button.innerHTML = album.albumName;

      //   button.addEventListener('click', () => {
      //     history.replaceState({}, album.name, album.albumSlug);

      //     renderAlbum(album);
      //   });

      //   menuElement.append(button);

      //   album.button = button;
      // });

      window.addEventListener('load', () => {
        const album = albums.find(album => album.albumSlug === location.pathname);

        if (!album) {
          renderAlbum(albums[0]);

          return;
        }

        renderAlbum(album);

        showMenu();

        loadSong(0);
      });

      const TOTAL_POSTER_COUNT = 60;
      const POSTER_SIZE = 66;

      function createPosterImage(posterIndex) {
        const img = document.createElement('img');

        img.src = `/public/posters/${posterIndex}.png`;
        
        img.height = POSTER_SIZE;
        img.width = POSTER_SIZE;

        return img;
      }

      const posterElement = document.getElementById('posters');

      let debounceTimeout;

      const resizeObserver = new ResizeObserver(() => {
        clearTimeout(debounceTimeout);

        debounceTimeout = setTimeout(() => {
          requestAnimationFrame(() => {
            const { width, height } = document.body.getBoundingClientRect();

            posterElement.innerHTML = '';

            for (let i = 0; i < Math.ceil(height / POSTER_SIZE) + 1; i++) {
              const row = document.createElement('div');

              for (let ii = 0; ii < Math.ceil(width / POSTER_SIZE) + 1; ii++) {
                const posterIndex = Math.floor(Math.random() * TOTAL_POSTER_COUNT);

                row.append(createPosterImage(posterIndex));
              }

              posterElement.append(row);
            }
          });
        }, 200);
      });

      resizeObserver.observe(document.body);
    </script>
  </body>
</html>