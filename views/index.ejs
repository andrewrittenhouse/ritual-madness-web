<html>
  <head>
    <title>Ritual Madness</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="<%= publicPath %>/stylesheets/cool-input.css">
    <style>
      :root {
        --container-width: 25px;
      }

      * {
        font-family: "Century Gothic", CenturyGothic, AppleGothic, sans-serif;
      }

      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: #f2f3f4;
        background-color: #414a4c;
        font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
        margin: 0;
      }

      body > * {
        width: 100%
      }

      header {
        width: 100%;
        height: 4rem;

        display: flex;
        align-items: center;
        justify-content: space-around;
      }

      h2 {
        margin-top: 3rem;
      }

      .canvas-container {
        display: flex;
        align-items: center;
        justify-content: center;

        text-align: center;

        z-index: -1;

        width: 100%;
      }

      .songList {
        display: flex;
        flex-direction: column;
        align-items: start;
        margin-top: 1rem;
      }

      .songList div {
        border: 1px solid black;
        border-radius: 1rem;
        margin-top: 1rem;
        width: 16rem;
      }

      .songList div:hover {
        cursor: pointer;
        color: white;
        background-color: black;
      }

      canvas {
        height: var(--container-width);
        width: var(--container-width);
        margin: 2rem 0;
      }

      .audio {
        width: 100%;
      }

      audio::-webkit-media-controls-panel {
        background-color: white;
      }

      .content {
        max-width: 400px;
      }
    </style>
  </head>
  <body>
    <header>
      <div class="audio">
        <audio controls>
          <source />
        </audio>
      </div>
      <div class="canvas-container">
        <canvas></canvas>
      </div> 
    </header>

    <div class="content">
      <div id="songs"></div>
    </div>
    
    <script>
      const _player = (() => {
        const player = document.querySelector('audio');

        player.addEventListener('ended', () => nextSong());

        player.addEventListener('error', function failed(e) {
          // audio playback failed - show a message saying why
          // to get the source of the audio element use $(this).src
          switch (e.target.error.code) {
            case e.target.error.MEDIA_ERR_ABORTED:
              alert('You aborted the video playback.');
              break;
            case e.target.error.MEDIA_ERR_NETWORK:
              alert('A network error caused the audio download to fail.');
              break;
            case e.target.error.MEDIA_ERR_DECODE:
              alert('The audio playback was aborted due to a corruption problem or because the video used features your browser did not support.');
              break;
            case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
              alert('The video audio not be loaded, either because the server or network failed or because the format is not supported.');
              break;
            default:
              alert('An unknown error occurred.');
              break;
          }
        }, true);

        return player;
      })();

      const _songs = (() => {
        const songs = <%-songs%>;

        let elements = []

        let prevAlbumName = undefined;

        for (const [songIndex, song] of songs.entries()) {
          const { albumName, songName, url } = song;

          if (albumName !== prevAlbumName) {
            const heading = document.createElement('h2');
            heading.innerHTML = albumName;

            elements.push(heading);

            prevAlbumName = albumName;
          }

          const button = document.createElement('button');
          button.innerHTML = songName;
          button.addEventListener('click', () => playSong(songIndex));

          elements.push(button);

          song.button = button;
          song.songIndex = songIndex;
        }

        document.getElementById('songs').append(...elements);

        return songs;
      })();
      
      (() => {
        const canvas = document.querySelector('canvas');

        const canvasSize = 25 * window.devicePixelRatio;

        canvas.width = canvasSize;
        canvas.height = canvasSize;

        const worker = new Worker('<%=publicPath%>/scripts/animation-worker.js');

        const offscreenCanvas = canvas.transferControlToOffscreen();

        worker.postMessage({ 
          message: 'start', 
          params: { 
            canvas: offscreenCanvas,
            radius: canvasSize / 2
          }
        }, [offscreenCanvas]);

        document.addEventListener('hidden', () => {
          if (document.hidden) {
            worker.postMessage({ message: 'standby' });

            return;
          }
          
          worker.postMessage({ message: 'resume'});
        });
      })();

      let _currentSongIndex = 0;

      function playSong(songIndex, { loadOnly = false } = {}) {
        _currentSongIndex = songIndex;

        if (songIndex < _songs.length) {
          const { button, url } = _songs[songIndex];

          button.classList.remove('off');
          button.classList.add('on');

          _player.pause();

          _player.src = url;

          _player.load();

          if (!loadOnly) {
            _player.play();
          }
        }

        for (const otherSong of _songs) {
          if (otherSong.songIndex === songIndex) {
            continue;
          }

          otherSong.button.classList.add('off');
          otherSong.button.classList.remove('on');
        }
      }

      function nextSong() {
        if (_currentSongIndex === _songs.length - 1) {
          return
        }
        
        playSong(_currentSongIndex + 1);
      }

      playSong(0, { loadOnly: true });
    </script>
  </body>
</html>