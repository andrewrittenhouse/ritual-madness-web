<html>
  <head>
    <title>Ritual Madness</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="<%= publicPath %>/stylesheets/cool-input.css">
    <style>
      :root {
        --container-width: 33px;
      }

      * {
        font-family: "Times New Roman", Times, serif;
      }

      body {
        display: flex;
        flex-direction: column;
        align-items: center;
        color: #f2f3f4;
        background-color: #012009;
        font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
        margin: 1rem;
      }

      header {
        text-align: center;
      }

      .canvas-container {
        padding: 1rem 133px;
      }

      #songs {
        display: flex;
        flex-direction: column;
        align-items: start;
        margin-top: 1rem;
      }

      #songs div {
        border: 1px solid black;
        border-radius: 1rem;
        margin-top: 1rem;
      }

      #songs div:hover {
        cursor: pointer;
        color: white;
        background-color: black;
      }

      canvas {
        height: var(--container-width);
        width: var(--container-width);
        margin: 2rem 0;
      }

      #message {
        font-weight: bold;
        color: red;
        background-color: white;
        border-radius: 1;
      }

      #image {
        padding: 4rem;
        text-align: center;
      }

      img {
        max-width: 100%;
        max-height: 50vh;
      }
  </style>
  </head>
  <body>
    <header>
      <h1>Ritual Madness</h1>
    </header>

    <audio controls>
      <source />
    </audio>  
    <p id="message"></p>

    <div id="songs"></div>

    <div id="image">
      
    </div>
    
    <script>
      const messageText = document.getElementById('message');

      const _player = (() => {
        const player = document.querySelector('audio');

        player.addEventListener('ended', () => nextSong());

        player.addEventListener('error', function failed(e) {
          switch (e.target.error.code) {
            case e.target.error.MEDIA_ERR_ABORTED:
              messageText.innerHTML = 'You aborted the video playback.';
              break;
            case e.target.error.MEDIA_ERR_NETWORK:
              messageText.innerHTML = 'A network error caused the audio download to fail.';
              break;
            case e.target.error.MEDIA_ERR_DECODE:
              messageText.innerHTML = 'The audio playback was aborted due to a corruption problem or because the video used features your browser did not support.';
              break;
            case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
              messageText.innerHTML = 'The video audio not be loaded, either because the server or network failed or because the format is not supported.';
              break;
            default:
              messageText.innerHTML = 'An unknown error occurred.';
              break;
          }
        }, true);

        return player;
      })();

      const _songs = (() => {
        const songs = <%-songs%>;

        let elements = []

        let prevAlbumName = undefined;

        for (const [songIndex, song] of songs.entries()) {
          const { albumName, songName, url } = song;

          if (albumName !== prevAlbumName) {
            const heading = document.createElement('h2');
            heading.innerHTML = albumName;

            elements.push(heading);

            prevAlbumName = albumName;
          }

          const button = document.createElement('button');
          button.innerHTML = songName;
          button.addEventListener('click', () => playSong(songIndex));

          elements.push(button);

          song.button = button;
          song.songIndex = songIndex;
        }

        document.getElementById('songs').append(...elements);

        return songs;
      })();
      
      /*(() => {
        const canvas = document.querySelector('canvas');

        const canvasSize = 33 * window.devicePixelRatio;

        canvas.width = canvasSize;
        canvas.height = canvasSize;

        const worker = new Worker('<%=publicPath%>/scripts/animation-worker.js');

        const offscreenCanvas = canvas.transferControlToOffscreen();

        worker.postMessage({ 
          message: 'start', 
          params: { 
            canvas: offscreenCanvas,
            radius: canvasSize / 2
          }
        }, [offscreenCanvas]);

        document.addEventListener('hidden', () => {
          if (document.hidden) {
            worker.postMessage({ message: 'standby' });

            return;
          }
          
          worker.postMessage({ message: 'resume'});
        });
      })();*/

      let _currentSongIndex = 0;

      function playSong(songIndex, { loadOnly = false } = {}) {
        _currentSongIndex = songIndex;

        if (songIndex < _songs.length) {
          const { button, url } = _songs[songIndex];

          button.classList.remove('off');
          button.classList.add('on');

          _player.pause();

          _player.src = url;

          _player.load();

          if (!loadOnly) {
            _player.play();
          }
        }

        for (const otherSong of _songs) {
          if (otherSong.songIndex === songIndex) {
            continue;
          }

          otherSong.button.classList.add('off');
          otherSong.button.classList.remove('on');
        }
      }

      function nextSong() {
        if (_currentSongIndex === _songs.length - 1) {
          return
        }
        
        playSong(_currentSongIndex + 1);
      }

      playSong(0, { loadOnly: true });
    </script>
  </body>
</html>